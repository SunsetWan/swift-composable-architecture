{"abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or not, and"},{"text":" ","type":"text"},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"metadata":{"roleHeading":"Instance Method","externalID":"s:22ComposableArchitecture5StoreC5ifLet4then4else7Combine11Cancellable_pyACyqd__q_Gc_yyctqd__SgRszlF","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> any ","kind":"text"},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"platforms":[],"extendedModule":"ComposableArchitecture","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"method","title":"ifLet(then:else:)"},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"unwrap"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"kind":"text","text":": "},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":" = {}) -> any ","kind":"text"},{"preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"unwrap","content":[{"type":"paragraph","inlineContent":[{"text":"A function that is called with a store of non-optional state when the store’s","type":"text"},{"text":" ","type":"text"},{"text":"state is non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", or whenever it goes from "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"name":"else","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that is called when the store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", or whenever it"},{"text":" ","type":"text"},{"text":"goes from non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A cancellable that maintains a subscription to updates whenever the store’s state"},{"text":" ","type":"text"},{"type":"text","text":"goes from "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to non-"},{"code":"nil","type":"codeVoice"},{"text":" and vice versa, so that the caller can react to these changes.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"If the store’s state is non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", it will safely unwrap the value and bundle it into a new"},{"type":"text","text":" "},{"type":"text","text":"store of non-optional state that is passed to the first closure. If the store’s state is"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"text":", the second closure is called instead.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This method is useful for handling navigation in UIKit. The state for a screen the user wants","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to navigate to can be held as an optional value in the parent, and when that value goes from"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"text":" to non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", or non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to "},{"code":"nil","type":"codeVoice"},{"text":", you can update the navigation stack accordingly:","type":"text"}]},{"code":["class ParentViewController: UIViewController {","  let store: Store<ParentState, ParentAction>","  var cancellables: Set<AnyCancellable> = []","  \/\/ ...","  func viewDidLoad() {","    \/\/ ...","    store","      .scope(state: \\.optionalChild, action: \\.child)","      .ifLet(","        then: { [weak self] childStore in","          self?.navigationController?.pushViewController(","            ChildViewController(store: childStore),","            animated: true","          )","        },","        else: { [weak self] in","          guard let self else { return }","          navigationController?.popToViewController(self, animated: true)","        }","      )","      .store(in: &cancellables)","  }","}"],"syntax":"swift","type":"codeListing"}]}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Use 'observe' and 'if let store.scope', instead."}],"type":"paragraph"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"seeAlsoSections":[{"title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"generated":true,"anchor":"Combine-integration"}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/iflet(then:else:)"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"url":"\/documentation\/composablearchitecture\/store\/publisher","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"type":"topic","role":"symbol","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"title":"ifLet(then:else:)","type":"topic","role":"symbol","deprecated":true,"abstract":[{"text":"Calls one of two closures depending on whether a store’s optional state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" or not, and","type":"text"},{"text":" ","type":"text"},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}],"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"url":"\/documentation\/composablearchitecture\/viewstore\/publisher","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"type":"topic","role":"symbol","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"title":"UIKit Integration","kind":"article","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"}}}