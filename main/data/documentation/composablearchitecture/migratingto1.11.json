{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"type":"text","text":"APIs and deprecated 1 API."}]},{"name":"Important","style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Before following this migration guide be sure you have fully migrated to the newest","type":"text"},{"type":"text","text":" "},{"text":"tools of version 1.10. See ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},{"text":" for more information.","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Mutating-shared-state-concurrently","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Supplying-mock-read-only-state-to-previews","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Migrating-to-1112","isActive":true,"type":"reference"}]}]}]},{"type":"heading","anchor":"Mutating-shared-state-concurrently","level":2,"text":"Mutating shared state concurrently"},{"inlineContent":[{"text":"Version 1.10 of the Composable Architecture introduced a powerful tool for","type":"text"},{"type":"text","text":" "},{"overridingTitle":"sharing state","isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"sharing state","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},{"text":" amongst your features. And you can mutate a piece of shared","type":"text"},{"text":" ","type":"text"},{"text":"state directly, as if it were just a normal property on a value type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"text":" ","type":"text"},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"]},{"type":"paragraph","inlineContent":[{"text":"Now, ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" is ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"type":"text","text":"to it from two different threads. However, allowing direct mutation does make the value susceptible"},{"type":"text","text":" "},{"type":"text","text":"to race conditions. If you were to perform "},{"type":"codeVoice","code":"count += 1"},{"text":" from 1,000 threads, it is possible for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the final value to not be 1,000."}]},{"inlineContent":[{"type":"text","text":"We wanted the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" type to be as ergonomic as possible, and that is why we make it directly"},{"type":"text","text":" "},{"type":"text","text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so"},{"text":" ","type":"text"},{"type":"text","text":"now the "},{"type":"codeVoice","code":"wrappedValue"},{"text":" setter has been marked unavailable from asynchronous contexts, with","type":"text"},{"text":" ","type":"text"},{"text":"a helpful message of how to fix:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To fix this deprecation you can use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method on the projected value of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"text":" ","type":"text"},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"text":"Technically it is still possible to write code that has race conditions, such as this silly example:","type":"text"}]},{"type":"codeListing","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"text":" ","type":"text"},{"text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the","type":"text"},{"type":"text","text":" "},{"text":"shared state as possible in a single ","type":"text"},{"code":"withLock","type":"codeVoice"},{"type":"text","text":". That will make sure that the full unit of work is"},{"type":"text","text":" "},{"text":"guarded by a lock.","type":"text"}],"type":"paragraph"},{"anchor":"Supplying-mock-read-only-state-to-previews","text":"Supplying mock read-only state to previews","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":"constant"},{"type":"text","text":" helper on "},{"code":"SharedReader","type":"codeVoice"},{"type":"text","text":" has been introduced to simplify supplying mock data to"},{"text":" ","type":"text"},{"type":"text","text":"Xcode previews. It works like SwiftUI’s "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared references:"}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"],"type":"codeListing"},{"anchor":"Migrating-to-1112","level":2,"type":"heading","text":"Migrating to 1.11.2"},{"inlineContent":[{"type":"text","text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:"}],"type":"paragraph"},{"text":"`withLock` is now `@MainActor`","type":"heading","level":3,"anchor":"withLock-is-now-MainActor"},{"type":"paragraph","inlineContent":[{"text":"In ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"version 1.11","overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}],"type":"reference","isActive":true},{"type":"text","text":" of the library we deprecated mutating shared state from"},{"type":"text","text":" "},{"text":"asynchronous contexts, such as effects, and instead recommended using the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"overridingTitle":"migration guide","overridingTitleInlineContent":[{"text":"migration guide","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},{"type":"text","text":" for more info)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this did leave open the possibility for deadlocks if shared state was read from and written"},{"type":"text","text":" "},{"type":"text","text":"to on different threads. To fix this we have now restricted "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" to the "},{"code":"@MainActor","type":"codeVoice"},{"text":", and so","type":"text"},{"text":" ","type":"text"},{"text":"you will now need to ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" its usage:"}]},{"syntax":"diff","type":"codeListing","code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"]},{"inlineContent":[{"text":"The compiler should suggest this fix-it for you.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored","level":3},{"type":"paragraph","inlineContent":[{"text":"When the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper was first introduced, its dynamic member lookup was overloaded","type":"text"},{"type":"text","text":" "},{"text":"to automatically unwrap optionals for ergonomic purposes:","type":"text"}]},{"code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This unfortunately made dynamic member lookup a little more difficult to understand:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"]},{"inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}],"type":"paragraph"},{"inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"type":"text","text":" "},{"text":"removed entirely. Instead, you can use ","type":"text"},{"type":"codeVoice","code":"Shared.init(_:)"},{"type":"text","text":" to explicitly unwrap a shared optional"},{"type":"text","text":" "},{"type":"text","text":"value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"guard let","type":"codeVoice"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"type":"text","text":" "},{"type":"text","text":"migrate, use "},{"type":"codeVoice","code":"Shared.init(_:)"},{"type":"text","text":":"}]},{"code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"}]}],"kind":"article","metadata":{"title":"Migrating to 1.11","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","role":"article"},"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.11"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"type":"topic","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"kind":"article","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"title":"Migrating to 1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"text":"Update your code to use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"title":"Migrating to 1.11","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.11","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"#Mutating-shared-state-concurrently":{"title":"Mutating shared state concurrently","url":"#Mutating-shared-state-concurrently","type":"link","identifier":"#Mutating-shared-state-concurrently","titleInlineContent":[{"text":"Mutating shared state concurrently","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","role":"article","title":"Migrating to 1.10","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","type":"topic","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"url":"\/documentation\/composablearchitecture\/migratingto1.6","kind":"article","role":"article","title":"Migrating to 1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","type":"topic","abstract":[{"text":"Update your code to make use of the new","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"text":"assert on the payload inside an action received.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"abstract":[{"type":"text","text":"Update your code to make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro, and learn how to better leverage case key"},{"text":" ","type":"text"},{"text":"paths in your features.","type":"text"}],"title":"Migrating to 1.4","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"title":"scope(state:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"title":"Migrating to 1.15","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","type":"topic","role":"article","abstract":[{"type":"text","text":"The "},{"code":".appStorage","type":"codeVoice"},{"type":"text","text":" strategy used with "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","title":"Migrating to 1.16","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"url":"\/documentation\/composablearchitecture\/migratingto1.17","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" property wrapper and related tools have been extracted to their own","type":"text"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","role":"article","type":"topic","kind":"article","title":"Migrating to 1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"kind":"article","abstract":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" type is now officially ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"text":" isolated.","type":"text"}],"title":"Migrating to 1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"title":"send(_:assert:fileID:file:line:column:)","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">, "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for a type."}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","role":"collectionGroup","title":"Migration guides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"topic","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"url":"\/documentation\/composablearchitecture\/migratingto1.5","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference","isActive":true},{"type":"text","text":" operation on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","type":"topic","kind":"article","title":"Migrating to 1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"kind":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"reference"},{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"method on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"reference","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"title":"Migrating to 1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"url":"\/documentation\/composablearchitecture\/migratingto1.13","kind":"article","role":"article","title":"Migrating to 1.13","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","type":"topic","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"url":"\/documentation\/composablearchitecture\/migratingto1.8","kind":"article","role":"article","title":"Migrating to 1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","type":"topic","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"url":"\/documentation\/composablearchitecture\/migratingto1.17.1","kind":"article","role":"article","title":"Migrating to 1.17.1","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","type":"topic","abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","type":"topic","title":"Sharing state","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"text":" ","type":"text"},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"role":"article","url":"\/documentation\/composablearchitecture\/sharingstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol","type":"topic","kind":"symbol","title":"dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]},"#Supplying-mock-read-only-state-to-previews":{"title":"Supplying mock read-only state to previews","url":"#Supplying-mock-read-only-state-to-previews","type":"link","identifier":"#Supplying-mock-read-only-state-to-previews","titleInlineContent":[{"text":"Supplying mock read-only state to previews","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}],"title":"Migrating to 1.7","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"text":"the state changes.","type":"text"}],"title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","text":"_SendableCaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","title":"TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}]},"#Migrating-to-1112":{"title":"Migrating to 1.11.2","url":"#Migrating-to-1112","type":"link","identifier":"#Migrating-to-1112","titleInlineContent":[{"text":"Migrating to 1.11.2","type":"text"}]}}}