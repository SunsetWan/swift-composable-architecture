{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Update your code to make use of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"text":" ","type":"text"},{"type":"text","text":"APIs, and this article contains some tips for doing so."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Using-the-Reducer-macro"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Using-case-key-paths","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Receiving-test-store-actions","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Moving-off-of-TaskResult","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Identified-actions"}]}]}]},{"level":3,"text":"Using the @Reducer macro","type":"heading","anchor":"Using-the-Reducer-macro"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":". It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"type":"text","text":" "},{"text":"their type with ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"text":":","type":"text"}]},{"syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of","type":"text"},{"type":"text","text":" "},{"text":"reducer composition, such as case key paths (see guides below). See the documentation of","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}]},{"inlineContent":[{"text":"You can also technically drop the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" conformance:"}],"type":"paragraph"},{"syntax":"diff","type":"codeListing","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"type":"text","text":"See the documentation of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","isActive":true,"type":"reference"},{"text":" for more gotchas on using the ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro."}]},{"level":3,"anchor":"Using-case-key-paths","text":"Using case key paths","type":"heading"},{"inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type in favor of APIs that take"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"type":"codeVoice","code":"CaseKeyPath"},{"text":". Both of these types come from our ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"type":"text","text":" "},{"text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so with structs."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"text":" ","type":"text"},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for automatically deriving case paths so that we could stop using runtime reflection, and we"},{"text":" ","type":"text"},{"type":"text","text":"introduced a way of using key paths to describe case paths. And so the old "},{"type":"codeVoice","code":"CasePath"},{"text":" type has been","type":"text"},{"type":"text","text":" "},{"text":"deprecated, and the new ","type":"text"},{"code":"CaseKeyPath","type":"codeVoice"},{"type":"text","text":" type has taken its place."}]},{"inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/"},{"text":" prefix operator to derive the case path. For example:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"]},{"inlineContent":[{"text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" conformances with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which automatically applies the "},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro to the feature’s ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum among other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"things:"}]},{"syntax":"diff","type":"codeListing","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"inlineContent":[{"text":"Further, if the feature’s ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" is an enum, ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" will also be applied, along with"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"diff","type":"codeListing","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be"},{"type":"text","text":" "},{"type":"text","text":"useful when scoping a store’s state to a specific case:"}]},{"type":"codeListing","syntax":"diff","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"To form a case key path for any other enum, you must apply the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro explicitly:"}]},{"syntax":"swift","type":"codeListing","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]},{"type":"paragraph","inlineContent":[{"text":"And to access its associated values, you must also apply the ","type":"text"},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":" attributes:"}]},{"type":"codeListing","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"code":"\/","type":"codeVoice"},{"text":" prefix operator for case paths you should now be able to use","type":"text"},{"text":" ","type":"text"},{"text":"key path syntax, so long as all of the enums involved are ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you encounter any problems, create a ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true},{"type":"text","text":" on the Composable Architecture"},{"type":"text","text":" "},{"text":"repo.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Receiving test store actions","type":"heading","anchor":"Receiving-test-store-actions"},{"inlineContent":[{"text":"The power of case key paths and the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro has made it possible to massively simplify","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how one asserts on actions received in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":". Instead of constructing the concrete action"},{"type":"text","text":" "},{"type":"text","text":"received from an effect like this:"}],"type":"paragraph"},{"code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}]},{"syntax":"swift","code":["store.receive(\\.child.presented.response.success)"],"type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"code":"@CasePathable","type":"codeVoice"},{"text":". Reducer actions","type":"text"},{"type":"text","text":" "},{"text":"are typically ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" automatically via the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro, but other enums must be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"explicitly annotated:"}],"type":"paragraph"},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"type":"codeListing","syntax":"swift"}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"And in the case of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"type":"text","text":" you can even omit the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"path component:"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.child.response.success)"]},{"type":"paragraph","inlineContent":[{"text":"This does not assert on the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"data","type":"text"}]},{"text":" received in the action, but typically that is already covered","type":"text"},{"text":" ","type":"text"},{"text":"by the state assertion made inside the trailing closure of ","type":"text"},{"code":"receive","type":"codeVoice"},{"text":". And if you use this style of","type":"text"},{"type":"text","text":" "},{"text":"action receiving exclusively, you can even stop conforming your action types to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"There are a few advanced situations to be aware of. When receiving an action that involves an","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" (more information below in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"text":"), then","type":"text"},{"text":" ","type":"text"},{"text":"you can use the subscript ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","type":"reference","isActive":true},{"text":" to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"receive a particular action for an element:"}],"type":"paragraph"},{"code":["store.receive(\\.rows[id: 0].response.success)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And the same goes for ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"text":" too:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.path[id: 0].response.success)"]},{"level":3,"type":"heading","text":"Moving off of TaskResult","anchor":"Moving-off-of-TaskResult"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library, the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"text":" was soft-deprecated and eventually will be fully","type":"text"},{"text":" ","type":"text"},{"text":"deprecated and then removed. The original rationale for the introduction of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" was to"},{"text":" ","type":"text"},{"type":"text","text":"make an equatable-friendly version of "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" for when the error produced was "},{"code":"any Error","type":"codeVoice"},{"type":"text","text":", which is"},{"type":"text","text":" "},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" type in"},{"type":"text","text":" "},{"type":"text","text":"reducers can be equatable, and the reason for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"text":" is to make it possible to test actions","type":"text"},{"type":"text","text":" "},{"text":"emitted by effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Typically in tests, when one wants to assert that the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" received an action you must"},{"text":" ","type":"text"},{"type":"text","text":"specify a concrete action:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" uses the equatable conformance of "},{"code":"Action","type":"codeVoice"},{"text":" to confirm that you are asserting that","type":"text"},{"text":" ","type":"text"},{"text":"the store received the correct action.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, this becomes verbose when testing deeply nested features, which is common in integration"},{"text":" ","type":"text"},{"text":"tests:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"However, with the introduction of "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","overridingTitle":"case key paths","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"case key paths"}]},{"text":" we greatly improved the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the"},{"type":"text","text":" "},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"since typically that is covered in the state assertion:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"And this syntax does not require the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"text":"the case of the action was received. We are not testing the data in the action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We feel that with this better syntax there is less of a reason to have ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" and so we"},{"type":"text","text":" "},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" that you","type":"text"},{"text":" ","type":"text"},{"text":"think merits it being in the library, please ","type":"text"},{"overridingTitleInlineContent":[{"text":"open a discussion","type":"text"}],"overridingTitle":"open a discussion","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Identified actions","type":"heading","level":3,"anchor":"Identified-actions"},{"inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"text":" type which makes it more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"code":"Action","type":"codeVoice"},{"text":" enum for a particular row that holds the ID of the state being acted","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"upon as well as the action:"}],"type":"paragraph"},{"type":"codeListing","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be updated to hold onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" instead of those piece of data directly in the"},{"text":" ","type":"text"},{"text":"case:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"]},{"inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","isActive":true},{"type":"text","text":" with a case path using the"},{"text":" ","type":"text"},{"code":"\/","type":"codeVoice"},{"type":"text","text":" prefix operator:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you will instead use key path syntax to determine which case of the "},{"type":"codeVoice","code":"Action"},{"text":" enum holds the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"identified action:"}]},{"syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"text":" ","type":"text"},{"type":"text","text":"type-inference."}]},{"type":"paragraph","inlineContent":[{"text":"One last change you will need to make is anywhere you are destructuring the old-style action you","type":"text"},{"text":" ","type":"text"},{"text":"will need to insert a ","type":"text"},{"code":".element","type":"codeVoice"},{"type":"text","text":" layer:"}]},{"syntax":"diff","type":"codeListing","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"]}],"kind":"content"}],"metadata":{"roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"title":"Migrating to 1.4","role":"article"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"title":"scope(state:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","abstract":[],"url":"\/documentation\/composablearchitecture\/effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"fragments":[{"kind":"keyword","text":"subscript"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":") -> "},{"text":"AnyCasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"IdentifiedAction","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"title":"subscript(id:)","abstract":[],"url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"title":"Migrating to 1.15","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"title":"Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","kind":"section"},"#Moving-off-of-TaskResult":{"title":"Moving off of TaskResult","url":"#Moving-off-of-TaskResult","type":"link","identifier":"#Moving-off-of-TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"code":"TaskResult","type":"codeVoice"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"kind":"article","abstract":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" type is now officially ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"text":" isolated.","type":"text"}],"title":"Migrating to 1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14","type":"topic"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"title":"discussion","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","titleInlineContent":[{"type":"text","text":"discussion"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","role":"article","title":"Migrating to 1.10","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","type":"topic","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"url":"\/documentation\/composablearchitecture\/migratingto1.8","kind":"article","role":"article","title":"Migrating to 1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","type":"topic","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for a type."}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"kind":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"reference"},{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"method on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"reference","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"title":"Migrating to 1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" presentation state.","type":"text"}],"title":"PresentationAction.presented(_:)","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"presented"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","title":"TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"kind":"article","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"title":"Migrating to 1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","role":"collectionGroup","title":"Migration guides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"topic","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"type":"topic","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/presentationaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"url":"\/documentation\/composablearchitecture\/migratingto1.13","kind":"article","role":"article","title":"Migrating to 1.13","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","type":"topic","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","type":"topic","role":"article","abstract":[{"type":"text","text":"The "},{"code":".appStorage","type":"codeVoice"},{"type":"text","text":" strategy used with "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","title":"Migrating to 1.16","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"url":"\/documentation\/composablearchitecture\/migratingto1.6","kind":"article","role":"article","title":"Migrating to 1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","type":"topic","abstract":[{"text":"Update your code to make use of the new","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"text":"assert on the payload inside an action received.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"url":"\/documentation\/composablearchitecture\/migratingto1.17","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" property wrapper and related tools have been extracted to their own","type":"text"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","role":"article","type":"topic","kind":"article","title":"Migrating to 1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"url":"\/documentation\/composablearchitecture\/migratingto1.5","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference","isActive":true},{"type":"text","text":" operation on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","type":"topic","kind":"article","title":"Migrating to 1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"title":"Reducer"},"#Identified-actions":{"title":"Identified actions","url":"#Identified-actions","type":"link","identifier":"#Identified-actions","titleInlineContent":[{"type":"text","text":"Identified actions"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","url":"\/documentation\/composablearchitecture\/stackaction","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}],"title":"StackAction","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"text":"the state changes.","type":"text"}],"title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","text":"_SendableCaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}],"title":"Migrating to 1.7","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7"},"#Receiving-test-store-actions":{"title":"Receiving test store actions","url":"#Receiving-test-store-actions","type":"link","identifier":"#Receiving-test-store-actions","titleInlineContent":[{"type":"text","text":"Receiving test store actions"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedaction","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdentifiedAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","title":"IdentifiedAction","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}]},"#Using-the-Reducer-macro":{"title":"Using the @Reducer macro","url":"#Using-the-Reducer-macro","type":"link","identifier":"#Using-the-Reducer-macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"text":"Update your code to use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"title":"Migrating to 1.11","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.11","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"title":"forEach(_:action:element:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementState"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ID","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"text":"ElementState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","kind":"typeIdentifier","text":"IdentifiedAction"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":">>, "},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"kind":"text","text":">\n"}],"role":"symbol","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8"},"http://github.com/pointfreeco/swift-case-paths":{"title":"CasePaths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"type":"text","text":"CasePaths"}]},"#Using-case-key-paths":{"title":"Using case key paths","url":"#Using-case-key-paths","type":"link","identifier":"#Using-case-key-paths","titleInlineContent":[{"type":"text","text":"Using case key paths"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"title":"TaskResult","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/taskresult","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","deprecated":true,"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" "},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"url":"\/documentation\/composablearchitecture\/migratingto1.17.1","kind":"article","role":"article","title":"Migrating to 1.17.1","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","type":"topic","abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"title":"send(_:assert:fileID:file:line:column:)","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">, "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol","type":"topic","kind":"symbol","title":"dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]}}}