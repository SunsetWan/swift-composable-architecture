{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"text":" ","type":"text"},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There primary way to create an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" in the library is via"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":". It takes a "},{"type":"codeVoice","code":"@Sendable"},{"text":", asynchronous closure,","type":"text"},{"text":" ","type":"text"},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only capture "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" variables that are bound with "},{"code":"let","type":"codeVoice"},{"text":". Mutable variables and non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"types are simply not allowed to be passed to "},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closures."}]},{"inlineContent":[{"text":"There are two primary ways you will run into this restriction when building a feature in the","type":"text"},{"text":" ","type":"text"},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within an effect."}],"type":"paragraph"},{"text":"Accessing state in an effect","anchor":"Accessing-state-in-an-effect","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"type":"text","text":" "},{"type":"text","text":"from within "},{"type":"codeVoice","code":"@Sendable"},{"text":" closures:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"text":"closure:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"text":" ","type":"text"},{"type":"text","text":"variable name for the capture:"}]},{"code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Accessing-dependencies-in-an-effect","type":"heading","text":"Accessing dependencies in an effect","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"text":" ","type":"text"},{"text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous and concurrent contexts, and so must be ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If your dependency is not sendable, you will be notified at the time of registering it with the","type":"text"},{"type":"text","text":" "},{"text":"library. In particular, when extending ","type":"text"},{"type":"codeVoice","code":"DependencyValues"},{"type":"text","text":" to provide the computed property:"}]},{"code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" is not "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"code":"get","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" lines:"}]},{"type":"codeListing","syntax":null,"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"]},{"inlineContent":[{"type":"text","text":"To fix this you need to make each dependency "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just means making sure"},{"text":" ","type":"text"},{"type":"text","text":"that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"text":" data, and in particular, any closure-based","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"]},{"inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" values, thus"},{"text":" ","type":"text"},{"type":"text","text":"making the entire "},{"code":"FactClient","type":"codeVoice"},{"text":" sendable itself.","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"anchor":"Integrations","title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"generated":true}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Adopting Swift concurrency","roleHeading":"Article"},"sections":[],"abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"title":"UIKit Integration","kind":"article","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","url":"\/documentation\/composablearchitecture\/observationbackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"role":"article","type":"topic","kind":"article","title":"Observation backport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","abstract":[],"url":"\/documentation\/composablearchitecture\/effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"title":"run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"type":"topic"}}}