{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"collectionGroup","roleHeading":"API Collection","title":"UIKit Integration"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the Composable Architecture was designed with SwiftUI in mind, it comes with tools to"},{"text":" ","type":"text"},{"type":"text","text":"integrate into application code written in UIKit."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uikit"]}],"seeAlsoSections":[{"generated":true,"title":"Integrations","anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"]}],"topicSections":[{"title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"anchor":"Combine-integration"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"kind":"article","sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"url":"\/documentation\/composablearchitecture\/store\/publisher","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"type":"topic","role":"symbol","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","url":"\/documentation\/composablearchitecture\/observationbackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"role":"article","type":"topic","kind":"article","title":"Observation backport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"url":"\/documentation\/composablearchitecture\/viewstore\/publisher","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"type":"topic","role":"symbol","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"title":"ifLet(then:else:)","type":"topic","role":"symbol","deprecated":true,"abstract":[{"text":"Calls one of two closures depending on whether a store’s optional state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" or not, and","type":"text"},{"text":" ","type":"text"},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}],"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"role":"article","type":"topic","kind":"article","title":"Adopting Swift concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","type":"topic"}}}