{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/viewstore\/publisher"]}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState"}]}],"seeAlsoSections":[{"title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher"],"anchor":"Combine-integration","generated":true}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"metadata":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Property","modules":[{"name":"ComposableArchitecture"}],"title":"publisher","symbolKind":"property","externalID":"s:22ComposableArchitecture9ViewStoreC9publisherAA0D9PublisherVyxGvp","role":"symbol","platforms":[]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"This publisher supports dynamic member lookup so that you can pluck out a specific field in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the state:"}],"type":"paragraph"},{"type":"codeListing","code":["viewStore.publisher.alert","  .sink { ... }"],"syntax":"swift"},{"inlineContent":[{"text":"When the emission happens the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":"’s state has been updated, and so the following"},{"type":"text","text":" "},{"text":"precondition will pass:","type":"text"}],"type":"paragraph"},{"code":["viewStore.publisher","  .sink { precondition($0 == viewStore.state) }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This means you can either use the value passed to the closure or you can reach into","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"viewStore.state"},{"text":" directly.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Due to a bug in Combine (or feature?), the order you ","type":"text"},{"code":".sink","type":"codeVoice"},{"text":" on a publisher has no","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bearing on the order the "},{"code":".sink","type":"codeVoice"},{"type":"text","text":" closures are called. This means the work performed inside"},{"type":"text","text":" "},{"code":"viewStore.publisher.sink","type":"codeVoice"},{"type":"text","text":" closures should be completely independent of each other. Later"},{"type":"text","text":" "},{"type":"text","text":"closures cannot assume that earlier ones have already run."}]}],"style":"note"}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"type":"topic","kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore","abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"title":"UIKit Integration","kind":"article","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"url":"\/documentation\/composablearchitecture\/store\/publisher","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"type":"topic","role":"symbol","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"url":"\/documentation\/composablearchitecture\/storepublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A publisher of store state."}],"title":"StorePublisher","navigatorTitle":[{"text":"StorePublisher","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StorePublisher"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"url":"\/documentation\/composablearchitecture\/viewstore\/publisher","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"type":"topic","role":"symbol","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"title":"ifLet(then:else:)","type":"topic","role":"symbol","deprecated":true,"abstract":[{"text":"Calls one of two closures depending on whether a store’s optional state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" or not, and","type":"text"},{"text":" ","type":"text"},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> any "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}],"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"}}}