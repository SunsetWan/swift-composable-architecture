{"metadata":{"platforms":[],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"role":"symbol","title":"send(_:while:)","externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method"},"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"text":": ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An action."}]}]},{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"text":"A predicate on ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"text":" that determines for how long this method should","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"suspend."}]}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method can be used to interact with async\/await code, allowing you to suspend while work"},{"text":" ","type":"text"},{"type":"text","text":"is being performed in an effect. One common example of this is using SwiftUI’s "},{"code":".refreshable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method, which shows a loading indicator on the screen while work is being performed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh","type":"text"},{"type":"text","text":" "},{"text":"gesture is performed on a list. The domain and logic for this feature can be modeled like so:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct Feature {","  struct State: Equatable {","    var isLoading = false","    var response: String?","  }","  enum Action {","    case pulledToRefresh","    case receivedResponse(Result<String, any Error>)","  }","  @Dependency(\\.fetch) var fetch","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .pulledToRefresh:","        state.isLoading = true","        return .run { send in","          await send(.receivedResponse(Result { try await self.fetch() }))","        }","","      case let .receivedResponse(result):","        state.isLoading = false","        state.response = try? result.value","        return .none","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we keep track of an "},{"code":"isLoading","type":"codeVoice"},{"text":" boolean in our state so that we know exactly when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the network response is being performed."}]},{"inlineContent":[{"text":"The view can show the fact in a ","type":"text"},{"type":"codeVoice","code":"List"},{"text":", if it’s present, and we can use the ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"view modifier to enhance the list with pull-to-refresh capabilities:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Here we’ve used the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","type":"reference","isActive":true},{"text":" method to suspend while the ","type":"text"},{"type":"codeVoice","code":"isLoading"},{"text":" state is","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":". Once that piece of state flips back to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" the method will resume, signaling to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" that the work has finished which will cause the loading indicator to disappear."}],"type":"paragraph"}],"kind":"content"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"anchor":"Sending-actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)"],"generated":true,"title":"Sending actions"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"deprecated":true,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask"}],"kind":"symbol","title":"send(_:)","type":"topic","abstract":[{"text":"Sends an action to the store.","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"deprecated":true,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"yield","kind":"identifier"},{"kind":"text","text":"("},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"kind":"symbol","type":"topic","title":"yield(while:)","abstract":[{"type":"text","text":"Suspends the current task while a predicate on state is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"type":"topic","kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore","abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/swiftuideprecations","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"deprecated":true,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"kind":"symbol","type":"topic","title":"send(_:while:)","abstract":[{"text":"Sends an action into the store and then suspends while a piece of state is ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"}}}