{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/typeSelectEquivalent(_:)-1yh7z","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Inherited from ","type":"text"},{"code":"View.typeSelectEquivalent(_:)","type":"codeVoice"},{"type":"text","text":"."}],"sections":[],"metadata":{"externalID":"s:7SwiftUI4ViewPAAE20typeSelectEquivalentyQrqd__SyRd__lF::SYNTHESIZED::s:22ComposableArchitecture10IfLetStoreV","modules":[{"relatedModules":["SwiftUICore"],"name":"ComposableArchitecture"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeSelectEquivalent"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"}],"role":"symbol","symbolKind":"method","extendedModule":"SwiftUICore","roleHeading":"Instance Method","platforms":[{"introducedAt":"16.0","name":"iOS","beta":false,"deprecated":false,"unavailable":false},{"deprecated":false,"unavailable":false,"introducedAt":"13.0","name":"macOS","beta":false},{"name":"tvOS","beta":false,"introducedAt":"16.0","unavailable":false,"deprecated":false},{"beta":false,"name":"watchOS","introducedAt":"9.0","deprecated":false,"unavailable":false}],"title":"typeSelectEquivalent(_:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/ifletstore\/typeselectequivalent(_:)-1yh7z"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"nonisolated"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeSelectEquivalent","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"string","kind":"internalParam"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sy","text":"StringProtocol"},{"kind":"text","text":"\n"}],"languages":["swift"]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/typeSelectEquivalent(_:)-1yh7z":{"url":"\/documentation\/composablearchitecture\/ifletstore\/typeselectequivalent(_:)-1yh7z","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/typeSelectEquivalent(_:)-1yh7z","title":"typeSelectEquivalent(_:)","type":"topic","abstract":[],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeSelectEquivalent","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","role":"collectionGroup","title":"View Implementations","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/swiftuideprecations","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"}}}